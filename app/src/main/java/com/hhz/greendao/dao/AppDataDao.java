package com.hhz.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hhz.greendao.entity.AppData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP_DATA".
*/
public class AppDataDao extends AbstractDao<AppData, Long> {

    public static final String TABLENAME = "APP_DATA";

    /**
     * Properties of entity AppData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PageNo = new Property(1, String.class, "pageNo", false, "PAGE_NO");
        public final static Property PageTotal = new Property(2, String.class, "pageTotal", false, "PAGE_TOTAL");
        public final static Property IconResId = new Property(3, int.class, "iconResId", false, "ICON_RES_ID");
        public final static Property Label = new Property(4, String.class, "label", false, "LABEL");
        public final static Property BgColor = new Property(5, int.class, "bgColor", false, "BG_COLOR");
        public final static Property BgIndex = new Property(6, int.class, "bgIndex", false, "BG_INDEX");
        public final static Property PackageName = new Property(7, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property Version = new Property(8, String.class, "version", false, "VERSION");
        public final static Property Size = new Property(9, long.class, "size", false, "SIZE");
        public final static Property LoadedSize = new Property(10, long.class, "LoadedSize", false, "LOADED_SIZE");
        public final static Property LoadingSize = new Property(11, long.class, "LoadingSize", false, "LOADING_SIZE");
        public final static Property LoadStatus = new Property(12, boolean.class, "loadStatus", false, "LOAD_STATUS");
        public final static Property HasUpdate = new Property(13, boolean.class, "hasUpdate", false, "HAS_UPDATE");
    }


    public AppDataDao(DaoConfig config) {
        super(config);
    }
    
    public AppDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PAGE_NO\" TEXT," + // 1: pageNo
                "\"PAGE_TOTAL\" TEXT," + // 2: pageTotal
                "\"ICON_RES_ID\" INTEGER NOT NULL ," + // 3: iconResId
                "\"LABEL\" TEXT," + // 4: label
                "\"BG_COLOR\" INTEGER NOT NULL ," + // 5: bgColor
                "\"BG_INDEX\" INTEGER NOT NULL ," + // 6: bgIndex
                "\"PACKAGE_NAME\" TEXT," + // 7: packageName
                "\"VERSION\" TEXT," + // 8: version
                "\"SIZE\" INTEGER NOT NULL ," + // 9: size
                "\"LOADED_SIZE\" INTEGER NOT NULL ," + // 10: LoadedSize
                "\"LOADING_SIZE\" INTEGER NOT NULL ," + // 11: LoadingSize
                "\"LOAD_STATUS\" INTEGER NOT NULL ," + // 12: loadStatus
                "\"HAS_UPDATE\" INTEGER NOT NULL );"); // 13: hasUpdate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AppData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pageNo = entity.getPageNo();
        if (pageNo != null) {
            stmt.bindString(2, pageNo);
        }
 
        String pageTotal = entity.getPageTotal();
        if (pageTotal != null) {
            stmt.bindString(3, pageTotal);
        }
        stmt.bindLong(4, entity.getIconResId());
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(5, label);
        }
        stmt.bindLong(6, entity.getBgColor());
        stmt.bindLong(7, entity.getBgIndex());
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(8, packageName);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(9, version);
        }
        stmt.bindLong(10, entity.getSize());
        stmt.bindLong(11, entity.getLoadedSize());
        stmt.bindLong(12, entity.getLoadingSize());
        stmt.bindLong(13, entity.getLoadStatus() ? 1L: 0L);
        stmt.bindLong(14, entity.getHasUpdate() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AppData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pageNo = entity.getPageNo();
        if (pageNo != null) {
            stmt.bindString(2, pageNo);
        }
 
        String pageTotal = entity.getPageTotal();
        if (pageTotal != null) {
            stmt.bindString(3, pageTotal);
        }
        stmt.bindLong(4, entity.getIconResId());
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(5, label);
        }
        stmt.bindLong(6, entity.getBgColor());
        stmt.bindLong(7, entity.getBgIndex());
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(8, packageName);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(9, version);
        }
        stmt.bindLong(10, entity.getSize());
        stmt.bindLong(11, entity.getLoadedSize());
        stmt.bindLong(12, entity.getLoadingSize());
        stmt.bindLong(13, entity.getLoadStatus() ? 1L: 0L);
        stmt.bindLong(14, entity.getHasUpdate() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AppData readEntity(Cursor cursor, int offset) {
        AppData entity = new AppData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pageNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pageTotal
            cursor.getInt(offset + 3), // iconResId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // label
            cursor.getInt(offset + 5), // bgColor
            cursor.getInt(offset + 6), // bgIndex
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // packageName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // version
            cursor.getLong(offset + 9), // size
            cursor.getLong(offset + 10), // LoadedSize
            cursor.getLong(offset + 11), // LoadingSize
            cursor.getShort(offset + 12) != 0, // loadStatus
            cursor.getShort(offset + 13) != 0 // hasUpdate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AppData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPageNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPageTotal(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIconResId(cursor.getInt(offset + 3));
        entity.setLabel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBgColor(cursor.getInt(offset + 5));
        entity.setBgIndex(cursor.getInt(offset + 6));
        entity.setPackageName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVersion(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSize(cursor.getLong(offset + 9));
        entity.setLoadedSize(cursor.getLong(offset + 10));
        entity.setLoadingSize(cursor.getLong(offset + 11));
        entity.setLoadStatus(cursor.getShort(offset + 12) != 0);
        entity.setHasUpdate(cursor.getShort(offset + 13) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AppData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AppData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AppData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
